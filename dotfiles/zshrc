ZSH=$HOME/.repos/oh-my-zsh

if [[ -d "$HOME/.repos/zsh-completions/src" ]]; then
	fpath=($fpath ~/.repos/zsh-completions/src)
fi

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(git)
if [ `uname` = 'Darwin' ]; then
	plugins=($plugins brew)
fi
source $ZSH/oh-my-zsh.sh

# User configuration
export PATH=$HOME/bin:/usr/local/bin:$PATH

# prompt
eval "$(starship init zsh)"

# alias
alias ls='ls -G'
alias ll='ls -l'
alias u='cd ..'
alias uu='cd ../..'
alias uuu='cd ../../..'
alias tmux="tmux -2 -u"
alias sk="sk --layout=reverse --ansi"
alias skp='sk --layout=reverse --ansi --preview="preview.sh {}"'
alias g='cd $(ghq root)/$(ghq list|sk)'
alias groot='cd $(git rev-parse --show-toplevel)'
alias -g X="|xargs -o"
alias -g "$"="|xargs -o"
alias -g L="|less"

# z
source ~/.repos/z/z.sh;

setopt extended_glob
setopt auto_param_keys # カッコの対応などを自動的に補完
setopt correct # スペルチェック
setopt hist_ignore_all_dups

# zmv
autoload -Uz zmv
alias zmv='noglob zmv'

function chpwd() {
    ls;
}

# When a file path given, goes to the directory.
function cdd()
{
  if [ -d "$1" ]; then
    local dir=$1
  else
    local dir=$(dirname $1)
  fi
  cd $dir
}

#-- widget
function _git_status()
{
    if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = 'true' ]; then
        echo git status
        git status
    fi
    zle reset-prompt
}
zle -N git_status _git_status
bindkey '^G^S' git_status

##-- utilities powered by sk
function sk-select-history()
{
    BUFFER=$(fc -l -n 1 | sk --tac --query "$LBUFFER")
    CURSOR=$#BUFFER             # move cursor
    zle -R -c                   # refresh
}
zle -N sk-select-history

function sk-z-move()
{
  local res=$(z | sort -rn | cut -c 12- | sk)
  if [ -n "$res" ]; then
    BUFFER+="cd $res"
    zle accept-line
  else
    return 1
  fi
}
zle -N sk-z-move

function sk-git-select-modified-files()
{
    file=$(cat <(git diff --name-only) <(git diff --cached --name-only)|sort|uniq|sk -m --prompt "[select file]"|tr '\n' ' ')
    BUFFER="${BUFFER}${file}"
    CURSOR=$#BUFFER
    zle redisplay
}
zle -N sk-git-select-modified-files

function sk-git-select-files()
{
    files=$(git ls-files $(git rev-parse --show-toplevel)|sk -m --prompt "[find file]" --preview "preview.sh {}"|tr '\n' ' ')
    BUFFER="${BUFFER}${files}"
    CURSOR=$#BUFFER
    zle redisplay
}
zle -N sk-git-select-files

function sk-select-files()
{
    files=$(ag -g ".*"|sk -m --preview "preview.sh {}")
    BUFFER="${BUFFER}${files}"
    CURSOR=$#BUFFER
    zle redisplay
}
zle -N sk-select-files

function sk-open-files()
{
    files=$(sk -m --ansi -i -c 'ag --color "{}"' --preview "preview.sh {}" |cut -d: -f1,2|tr '\n', ' ')
    if [ ! -z "${files}" ]; then
      BUFFER+="code -g ${files}"
      zle accept-line
    fi
    return 1
}
zle -N sk-open-files

function sk-git-cd()
{
    dir=$(git ls-files $(git rev-parse --show-toplevel)|sed -e '/^[^\/]*$/d' -e 's/\/[^\/]*$//g'|sort|uniq|sk)
    if [ ! -z "${dir}" ]; then
      BUFFER+="cd ${dir}"
      zle accept-line
    fi
    return 1
}
zle -N sk-git-cd

which sk > /dev/null
if [ $? -eq 0 ]; then
  bindkey '^R' sk-select-history
  bindkey '^z' sk-z-move
  bindkey '^g^f' sk-git-select-files
  bindkey '^g^m' sk-git-select-modified-files
  bindkey '^g^r' sk-select-files
  bindkey '^g^o' sk-open-files
  bindkey '^g^a' sk-git-cd
fi

source ~/.zshrc.local;
